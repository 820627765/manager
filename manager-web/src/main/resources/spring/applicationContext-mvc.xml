<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd">

       <!--1.配置组件扫描-->
      <context:component-scan base-package="com.znb.web.controller"></context:component-scan>

       <!--2.配置视图解析器-->
       <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
              <property name="prefix" value="/WEB-INF/views/"></property>
              <property name="suffix" value=".jsp"></property>
       </bean>

       <!--
            <mvc:default-servlet-handler/>将在springMVC上下文中定义一个 DefaultServletHttpRequestHandler 它
            回对进入DispatcherServlet 的请求进行筛查，如果发现是没有经过映射的请求，就将该请求交由WEB应用
            服务器默认的Servlet处理，如果是有映射的请求（即配置了@RequestMapping)，才由DispatcherServlet 继续处理。

            一般 WEB 应用服务器默认的Servlet的名称都是default。若所使用的WEB服务器的默认Servlet不是default，
            则需要通过 default-servlet-name 属性显示指定。

            配置了 default-servlet-handler 后，@RequestMapping 的映射回失效，需要加上mvc:annotation-driven
       -->
       <mvc:default-servlet-handler default-servlet-name="default"/>
       <mvc:annotation-driven/>

      <!--配置文件上传解析器
            id必须要写，且名字必须叫 multipartResolver。否则就会报错。
            原因是springMVC底层在寻找这个组件的时候，就是通过该名字去找的。
      -->
      <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
            <!--保证与上传表单所在的JSP页面的编码一致-->
            <property name="defaultEncoding" value="utf-8"></property>
            <!--最大上传大小，单位是字节-->
            <property name="maxUploadSize" value="1024"></property>
      </bean>

      <!--拦截器的配置-->
      <mvc:interceptors>
        <!--直接配置在<mvc:interceptors>下的拦截器bean，会拦截所有进入DispatcherServlet的请求-->
              <!--配置方式1.直接使用class指定类名的方式-->
              <bean class="com.znb.web.intectptor.MyFirstInterceptor"></bean>
              <!--配置方式2.在拦截器类上加上@Component 注解，然后再这里使用ref的方式配置，如下
                <ref bean="myFirstInterceptor"></ref>  bean属性指定这里引用的拦截器对象，一般是类名首字母小写作为名字。
              -->
      </mvc:interceptors>
</beans>